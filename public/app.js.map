{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/config.ts","webpack:///./src/utils.ts","webpack:///./src/event-handler.ts","webpack:///./src/keyboard-controls.ts","webpack:///./src/game-engine.ts","webpack:///./src/firework/config.ts","webpack:///./src/color.ts","webpack:///./src/firework/particle.ts","webpack:///./src/firework/firework.ts","webpack:///./src/firework/star.ts","webpack:///./src/firework/firework-service.ts","webpack:///./src/game-controller.ts","webpack:///./src/player-manager.ts","webpack:///./src/player.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Config","canvasWidth","canvasHeight","lineWidth","fps","angleModifier","pixelsPerSecond","scoreBoardWith","holeSize","holeFrequency","getRandomNumber","minimum","maximum","Math","floor","random","EKeyCode","EMouseClick","EventHandler","addEventListener","node","eventName","callback","callbackListener","event","this","eventCallbacks","set","removeEventListener","entry","delete","oneTimeEventListener","Map","game_engine_GameEngine","GameEngine","canvas","players","interval","stepsUntilHolePerPlayer","holeSizePerPlayer","speed","playerRanks","canvasContext","prepare","_this","Promise","resolve","reject","resolveCallback","draw","start","window","setInterval","stop","clearInterval","filter","player","isActive","isAlive","forEach","isTurningLeft","angle","isTurningRight","deltaX","cos","PI","deltaY","sin","hitTest","x","xPosition","y","yPosition","unshift","alivePlayers","length","has","id","getStepsUntilNextHole","strokeStyle","color","fillStyle","beginPath","moveTo","lineTo","stroke","point","getImageData","data","EColor","FireworkConfig","minStrength","maxStrength","minTrails","maxTrails","gravity","airResistance","numberOfStars","fireworkLifeTime","trailLength","delay","particle_Particle","Particle","drawingContext","vx","vy","ax","ay","lifeTime","radius","path","update","shift","push","opacity","trunc","closePath","fill","arc","firework_Firework","Firework","strength","life","particles","star_Star","Star","maxStarRadius","flashingFactor","b","firework_service_FireworkService","FireworkService","withStars","stars","isRunning","mainWithThis","main","bind","firework1","firework2","createStars","saveDrawingSurface","animationId","cancelAnimationFrame","restoreDrawingSurface","star","requestAnimationFrame","previousState","putImageData","game_controller_GameController","GameController","playerManager","frameLineWidth","fireworkService","drawKeySettings","startGameEventListener","keyCode","Space","Enter","getNumberOfActivePlayers","drawGameFrames","gameEngine","getPlayers","initializePlayers","startRound","drawPlayingFieldFrame","then","ranks","updateScores","drawScoreboard","getHighestScore","getMaxScore","drawWinningScreen","document","startNextRoundKeyboardEvent","startEngingeKeyboardEvent","textAlign","font","fontSize","playersWon","score","textString","map","join","textWidth","measureText","width","index","textChunk","fillText","resetActiveStatus","resetScores","startNewGameKeyboardEvent","clearRect","strokeRect","getKeyName","leftControl","rightControl","togglePlayerReadyStateKeyboard","togglePlayerReadyStateMouse","activePlayer","preventDefault","button","find","Left","drawPlayerReadyState","Right","inactivePlayer","state","playerIndex","findIndex","currentPlayer","One","Q","LAlt","RAlt","M","Comma","P","SZ","Down","Y","X","rect","padStart","player_manager_PlayerManager","PlayerManager","addPlayer","Error","bindKeyboardControls","removePlayer","Array","from","values","scores","max","apply","Player","_xPosition","_yPosition","_angle","_isAlive","_score","_isTurningLeft","_isTurningRight","_isActive","_id","_name","_color","_leftControl","_rightControl","onload","body","clientWidth","clientHeight","canvasElement","getElementById","height","getContext","drawIntroText","player1","Red","player2","Yellow","player3","Orange","player4","Green","player5","Pink","player6","Blue"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var Config = /** @class */ (function () {\n    function Config() {\n    }\n    Config.canvasWidth = 0;\n    Config.canvasHeight = 0;\n    Config.lineWidth = 4;\n    Config.fps = 80;\n    /**\n     * Defines how many degrees a line should turn when turning left/right\n     */\n    Config.angleModifier = 2;\n    /**\n     * Defines the speed\n     */\n    Config.pixelsPerSecond = 100;\n    Config.scoreBoardWith = 150;\n    /**\n     * the width of holes\n     */\n    Config.holeSize = 10;\n    /**\n     * Defines the frequency with that holes appear. the lower, the less holes appear.\n     * Has to be greater than 0.\n     */\n    Config.holeFrequency = 10;\n    return Config;\n}());\nexport { Config };\n","function getRandomNumber(minimum, maximum) {\n    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n}\nexport { getRandomNumber };\n","var EventHandler = /** @class */ (function () {\n    function EventHandler() {\n    }\n    /**\n     * Registers a new event listener and adds it to the stack.\n     *\n     * @param {string} name of the function. should be unique. otherwise there will be conflicts\n     * @param {Node} node that registers the event. Usually something like document or element\n     * @param {string} eventName of the DOM Event that triggers the action.\n     * For example keydown, keyup, mousedown, etc.\n     * @param callback that will eventually be executed.\n     */\n    EventHandler.addEventListener = function (name, node, eventName, callback) {\n        var callbackListener = function (event) {\n            return callback(event);\n        };\n        node.addEventListener(eventName, callbackListener);\n        this.eventCallbacks.set(name, { node: node, eventName: eventName, callback: callbackListener });\n    };\n    /**\n     * Removes an existing event listener\n     *\n     * @param {string} name of the event\n     */\n    EventHandler.removeEventListener = function (name) {\n        var entry = this.eventCallbacks.get(name);\n        if (entry) {\n            entry.node.removeEventListener(entry.eventName, entry.callback);\n            this.eventCallbacks.delete(name);\n        }\n    };\n    /**\n     * Registers a one time event that will automatically deregister itself after being executed once\n     *\n     * @param {Node} node that registers the event. Usually something like document or element\n     * @param {string} eventName of the DOM Event that triggers the action.\n     * For example keydown, keyup, mousedown, etc.\n     * @param callback that will eventually be executed.\n     */\n    EventHandler.oneTimeEventListener = function (node, eventName, callback) {\n        var callbackListener = function (event) {\n            node.removeEventListener(eventName, callbackListener);\n            return callback(event);\n        };\n        node.addEventListener(eventName, callbackListener);\n    };\n    /**\n     * Stack that holds events until they are eventually deregistered\n     */\n    EventHandler.eventCallbacks = new Map();\n    return EventHandler;\n}());\nexport { EventHandler };\n","var EKeyCode;\n(function (EKeyCode) {\n    EKeyCode[EKeyCode[\"One\"] = 49] = \"One\";\n    EKeyCode[EKeyCode[\"Q\"] = 81] = \"Q\";\n    EKeyCode[EKeyCode[\"LAlt\"] = 17] = \"LAlt\";\n    EKeyCode[EKeyCode[\"RAlt\"] = 18] = \"RAlt\";\n    EKeyCode[EKeyCode[\"M\"] = 77] = \"M\";\n    EKeyCode[EKeyCode[\"Comma\"] = 188] = \"Comma\";\n    EKeyCode[EKeyCode[\"P\"] = 80] = \"P\";\n    EKeyCode[EKeyCode[\"SZ\"] = 189] = \"SZ\";\n    EKeyCode[EKeyCode[\"Left\"] = 37] = \"Left\";\n    EKeyCode[EKeyCode[\"Down\"] = 40] = \"Down\";\n    EKeyCode[EKeyCode[\"Space\"] = 32] = \"Space\";\n    EKeyCode[EKeyCode[\"Enter\"] = 13] = \"Enter\";\n    EKeyCode[EKeyCode[\"Y\"] = 89] = \"Y\";\n    EKeyCode[EKeyCode[\"X\"] = 88] = \"X\";\n})(EKeyCode || (EKeyCode = {}));\nvar EMouseClick;\n(function (EMouseClick) {\n    EMouseClick[\"Left\"] = \"Left\";\n    EMouseClick[\"Right\"] = \"Right\";\n})(EMouseClick || (EMouseClick = {}));\nexport { EKeyCode, EMouseClick };\n","import { Config } from './config';\nimport { getRandomNumber } from './utils';\nimport { EventHandler } from './event-handler';\nvar GameEngine = /** @class */ (function () {\n    function GameEngine(canvas, players) {\n        this.interval = 0;\n        this.stepsUntilHolePerPlayer = new Map();\n        this.holeSizePerPlayer = new Map();\n        this.speed = Config.pixelsPerSecond * (1000 / Config.fps / 1000);\n        this.playerRanks = [];\n        this.canvasContext = canvas;\n        this.players = players;\n    }\n    GameEngine.prototype.prepare = function () {\n        var _this = this;\n        if (this.interval) {\n            return new Promise(function (resolve) { return resolve([]); });\n        }\n        return new Promise(function (resolve, reject) {\n            _this.resolveCallback = resolve;\n            _this.playerRanks = [];\n            // Start drawing first few pixels so everybody knows his start position\n            _this.draw();\n            _this.draw();\n            _this.draw();\n            _this.draw();\n        });\n    };\n    GameEngine.prototype.start = function () {\n        var _this = this;\n        if (!this.interval) {\n            this.interval = window.setInterval(function () {\n                EventHandler.removeEventListener('draw');\n                _this.draw();\n            }, 1000 / Config.fps);\n        }\n    };\n    GameEngine.prototype.stop = function () {\n        clearInterval(this.interval);\n        this.interval = 0;\n        if (this.resolveCallback) {\n            this.resolveCallback(this.playerRanks);\n        }\n    };\n    GameEngine.prototype.draw = function () {\n        var _this = this;\n        this.players\n            .filter(function (player) {\n            return player.isActive && player.isAlive;\n        })\n            .forEach(function (player) {\n            if (player.isTurningLeft) {\n                player.angle -= Config.angleModifier;\n            }\n            if (player.isTurningRight) {\n                player.angle += Config.angleModifier;\n            }\n            var deltaX = Math.cos(player.angle * Math.PI / 180) * _this.speed;\n            var deltaY = Math.sin(player.angle * Math.PI / 180) * _this.speed;\n            if (_this.hitTest({ x: player.xPosition + deltaX, y: player.yPosition + deltaY })) {\n                _this.playerRanks.unshift(player);\n                player.isAlive = false;\n                var alivePlayers = _this.players.filter(function (player) {\n                    return player.isAlive;\n                });\n                if (alivePlayers.length < 2) {\n                    alivePlayers.forEach(function (player) {\n                        _this.playerRanks.unshift(player);\n                    });\n                    _this.stop();\n                }\n            }\n            if (!_this.stepsUntilHolePerPlayer.has(player.id)) {\n                _this.stepsUntilHolePerPlayer.set(player.id, _this.getStepsUntilNextHole());\n            }\n            if (_this.stepsUntilHolePerPlayer.get(player.id) === 0) {\n                if (!_this.holeSizePerPlayer.has(player.id)) {\n                    _this.holeSizePerPlayer.set(player.id, 0);\n                }\n                else {\n                    var holeSize = (_this.holeSizePerPlayer.get(player.id) || 0) + 1;\n                    _this.holeSizePerPlayer.set(player.id, holeSize);\n                    if (holeSize >= Config.holeSize) {\n                        _this.stepsUntilHolePerPlayer.set(player.id, _this.getStepsUntilNextHole());\n                        _this.holeSizePerPlayer.set(player.id, 0);\n                    }\n                }\n            }\n            else {\n                _this.stepsUntilHolePerPlayer.set(player.id, (_this.stepsUntilHolePerPlayer.get(player.id) || 1) - 1);\n                _this.canvasContext.strokeStyle = player.color;\n                _this.canvasContext.fillStyle = player.color;\n                _this.canvasContext.beginPath();\n                _this.canvasContext.lineWidth = Config.lineWidth;\n                _this.canvasContext.moveTo(player.xPosition, player.yPosition);\n                _this.canvasContext.lineTo(player.xPosition + deltaX, player.yPosition + deltaY);\n                _this.canvasContext.stroke();\n            }\n            player.xPosition += deltaX;\n            player.yPosition += deltaY;\n        });\n    };\n    GameEngine.prototype.getStepsUntilNextHole = function () {\n        return Math.floor(getRandomNumber(1, 100) * (100 / Config.holeFrequency));\n    };\n    GameEngine.prototype.hitTest = function (point) {\n        if (point.x > Config.canvasWidth || point.y > Config.canvasHeight || point.x < 0 || point.y < 0) {\n            return true;\n        }\n        if (this.canvasContext.getImageData(point.x, point.y, 1, 1).data[3] > 100) {\n            return true;\n        }\n        return false;\n    };\n    return GameEngine;\n}());\nexport { GameEngine };\n","var FireworkConfig = /** @class */ (function () {\n    function FireworkConfig() {\n    }\n    FireworkConfig.minStrength = 1.5;\n    FireworkConfig.maxStrength = 7;\n    FireworkConfig.minTrails = 10;\n    FireworkConfig.maxTrails = 30;\n    FireworkConfig.gravity = 5e-2;\n    FireworkConfig.airResistance = 1e-3;\n    FireworkConfig.numberOfStars = 150;\n    FireworkConfig.fireworkLifeTime = 150;\n    FireworkConfig.trailLength = 150;\n    FireworkConfig.delay = 0.5;\n    return FireworkConfig;\n}());\nexport { FireworkConfig };\n","var EColor;\n(function (EColor) {\n    EColor[\"Red\"] = \"#CC361F\";\n    EColor[\"Yellow\"] = \"#DBDE4B\";\n    EColor[\"Orange\"] = \"#EC7B34\";\n    EColor[\"Green\"] = \"#5FD441\";\n    EColor[\"Pink\"] = \"#DA4FAF\";\n    EColor[\"Blue\"] = \"#4AAAD7\";\n})(EColor || (EColor = {}));\nexport { EColor };\n","import { FireworkConfig } from './config';\nvar Particle = /** @class */ (function () {\n    function Particle(drawingContext, x, y, vx, vy, ax, ay, color) {\n        this.drawingContext = drawingContext;\n        this.x = x;\n        this.y = y;\n        this.vx = vx;\n        this.vy = vy;\n        this.ax = ax;\n        this.ay = ay;\n        this.color = color;\n        this.lifeTime = FireworkConfig.fireworkLifeTime;\n        this.radius = 3;\n        this.path = [];\n    }\n    Particle.prototype.update = function () {\n        this.lifeTime--;\n        // add point to path but if full, remove a point first\n        if (this.path.length >= FireworkConfig.trailLength)\n            this.path.shift();\n        this.path.push([this.x, this.y]);\n        // update speed n position n stuff\n        this.vy += this.ay;\n        this.vx += this.ax;\n        this.x += this.vx;\n        this.y += this.vy;\n    };\n    Particle.prototype.draw = function () {\n        var opacity = Math.trunc(this.lifeTime * 100 / FireworkConfig.fireworkLifeTime) / 100;\n        // tail\n        this.drawingContext.fillStyle = \"rgba(\" + this.color + \",\" + opacity * 0.4 + \")\";\n        if (this.lifeTime > FireworkConfig.fireworkLifeTime * 0.95) {\n            this.drawingContext.fillStyle = '#fff';\n        }\n        this.drawingContext.lineWidth = 40;\n        this.drawingContext.beginPath();\n        this.drawingContext.moveTo(this.x - this.radius, this.y);\n        this.drawingContext.lineTo(this.path[0][0], this.path[0][1]);\n        this.drawingContext.lineTo(this.x + this.radius, this.y);\n        this.drawingContext.closePath();\n        this.drawingContext.fill();\n        // main dot\n        this.drawingContext.fillStyle = \"rgba(\" + this.color + \",\" + opacity + \")\";\n        if (this.lifeTime > FireworkConfig.fireworkLifeTime * 0.95) {\n            this.drawingContext.fillStyle = '#fff';\n        }\n        this.drawingContext.beginPath();\n        this.drawingContext.arc(Math.trunc(this.x), Math.trunc(this.y), this.radius, 0, Math.PI * 2);\n        this.drawingContext.fill();\n        this.drawingContext.closePath();\n    };\n    return Particle;\n}());\nexport { Particle };\n","import { Config } from '../config';\nimport { Particle } from './particle';\nimport { FireworkConfig } from './config';\nvar Firework = /** @class */ (function () {\n    function Firework(drawingContext) {\n        this.drawingContext = drawingContext;\n        this.x = Config.canvasWidth * (Math.random() * 0.8 + 0.1); // from 0.1-0.9 widths\n        this.y = Config.canvasHeight * (Math.random() * 0.8 + 0.1); // from 0.1-0.9 heights\n        this.strength = Math.random() * (FireworkConfig.maxStrength - FireworkConfig.minStrength)\n            + FireworkConfig.minStrength;\n        this.color = Math.trunc(Math.random() * 255) + \",\" + Math.trunc(Math.random() * 255) + \",\"\n            + (\"\" + Math.trunc(Math.random() * 255));\n        this.life = 0;\n        this.particles = [];\n        var n = ~~(Math.random() * (FireworkConfig.maxTrails - FireworkConfig.minTrails)) + FireworkConfig.minTrails;\n        var ay = FireworkConfig.gravity;\n        for (var i = n; i--;) {\n            var ax = FireworkConfig.airResistance;\n            var angle = i * Math.PI * 2 / n;\n            if (angle < Math.PI) {\n                ax *= -1;\n            }\n            var vx = this.strength * Math.sin(angle);\n            var vy = this.strength * Math.cos(angle);\n            this.particles.push(new Particle(drawingContext, this.x, this.y, vx, vy, ax, ay, this.color));\n        }\n    }\n    Firework.prototype.update = function () {\n        this.life++;\n        if (this.life < 0) {\n            return; // allows life to be delayed\n        }\n        for (var i = this.particles.length; i--;) {\n            this.particles[i].update();\n            this.particles[i].draw();\n        }\n    };\n    return Firework;\n}());\nexport { Firework };\n","import { Config } from '../config';\nvar Star = /** @class */ (function () {\n    function Star(drawingContext) {\n        this.drawingContext = drawingContext;\n        this.maxStarRadius = 3;\n        this.flashingFactor = 0.4;\n        this.x = Math.random() * Config.canvasWidth;\n        this.y = Math.random() * Config.canvasHeight;\n        this.r = Math.random() * this.maxStarRadius;\n        this.b = Math.trunc(Math.random() * 100) / 100;\n    }\n    Star.prototype.draw = function () {\n        this.b += this.flashingFactor * (Math.random() - .5);\n        this.drawingContext.fillStyle = 'rgba(255,255,255,' + this.b + ')';\n        this.drawingContext.beginPath();\n        this.drawingContext.arc(Math.trunc(this.x), Math.trunc(this.y), this.r, 0, Math.PI * 2);\n        this.drawingContext.fill();\n        this.drawingContext.closePath();\n    };\n    return Star;\n}());\nexport { Star };\n","import { Firework } from './firework';\nimport { Star } from './star';\nimport { Config } from '../config';\nimport { FireworkConfig } from './config';\nvar FireworkService = /** @class */ (function () {\n    function FireworkService(drawingContext, withStars) {\n        this.drawingContext = drawingContext;\n        this.withStars = withStars;\n        this.stars = [];\n        this.isRunning = false;\n        this.mainWithThis = this.main.bind(this);\n        this.firework1 = new Firework(this.drawingContext);\n        this.firework2 = new Firework(this.drawingContext);\n        this.firework2.life = -FireworkConfig.fireworkLifeTime - FireworkConfig.delay;\n        if (this.withStars) {\n            this.createStars();\n        }\n    }\n    FireworkService.prototype.start = function () {\n        this.saveDrawingSurface();\n        this.isRunning = true;\n        this.main();\n    };\n    FireworkService.prototype.stop = function () {\n        this.isRunning = false;\n        if (this.animationId) {\n            window.cancelAnimationFrame(this.animationId);\n        }\n    };\n    FireworkService.prototype.createStars = function () {\n        for (var i = 0; i < FireworkConfig.numberOfStars; i++) {\n            this.stars.push(new Star(this.drawingContext));\n        }\n    };\n    FireworkService.prototype.main = function () {\n        if (this.isRunning) {\n            this.restoreDrawingSurface();\n        }\n        else {\n            return;\n        }\n        this.stars.forEach(function (star) {\n            star.draw();\n        });\n        this.firework1.update();\n        this.firework2.update();\n        if (this.firework1.life === FireworkConfig.fireworkLifeTime * FireworkConfig.delay) {\n            this.firework2 = new Firework(this.drawingContext);\n        }\n        if (this.firework2.life === FireworkConfig.fireworkLifeTime * FireworkConfig.delay) {\n            this.firework1 = new Firework(this.drawingContext);\n        }\n        if (this.isRunning) {\n            this.animationId = window.requestAnimationFrame(this.mainWithThis);\n        }\n    };\n    FireworkService.prototype.saveDrawingSurface = function () {\n        this.previousState = this.drawingContext.getImageData(0, 0, Config.canvasWidth, Config.canvasHeight);\n    };\n    FireworkService.prototype.restoreDrawingSurface = function () {\n        if (this.previousState) {\n            this.drawingContext.putImageData(this.previousState, 0, 0);\n        }\n    };\n    return FireworkService;\n}());\nexport { FireworkService };\n","import { Config } from './config';\nimport { GameEngine } from './game-engine';\nimport { EKeyCode, EMouseClick } from './keyboard-controls';\nimport { EventHandler } from './event-handler';\nimport { FireworkService } from './firework/firework-service';\nvar GameController = /** @class */ (function () {\n    function GameController(drawingContext, playerManager) {\n        this.drawingContext = drawingContext;\n        this.playerManager = playerManager;\n        this.frameLineWidth = 5;\n        this.fireworkService = new FireworkService(this.drawingContext, false);\n        this.drawKeySettings();\n    }\n    /**\n     * This basically starts an entire game.\n     */\n    GameController.prototype.startGameEventListener = function (event) {\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            if (this.playerManager.getNumberOfActivePlayers() < 2) {\n                return;\n            }\n            this.drawGameFrames();\n            this.gameEngine = new GameEngine(this.drawingContext, this.playerManager.getPlayers());\n            this.playerManager.initializePlayers();\n            this.startRound();\n            EventHandler.removeEventListener('toggle-ready-keyboard');\n            EventHandler.removeEventListener('toggle-ready-mouse');\n            EventHandler.removeEventListener('start-game');\n        }\n    };\n    /**\n     * Starts a new round.\n     */\n    GameController.prototype.startRound = function () {\n        var _this = this;\n        this.drawPlayingFieldFrame();\n        this.playerManager.initializePlayers();\n        if (this.gameEngine) {\n            this.gameEngine.prepare()\n                .then(function (ranks) {\n                _this.playerManager.updateScores(ranks);\n                _this.drawScoreboard();\n                if (_this.playerManager.getHighestScore() >= _this.getMaxScore()) {\n                    _this.drawWinningScreen();\n                }\n                else {\n                    EventHandler.addEventListener('start-new-round', document, 'keydown', _this.startNextRoundKeyboardEvent.bind(_this));\n                }\n            });\n            EventHandler.addEventListener('start-game-engine', document, 'keydown', this.startEngingeKeyboardEvent.bind(this));\n        }\n    };\n    GameController.prototype.startEngingeKeyboardEvent = function (event) {\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            if (this.gameEngine) {\n                this.gameEngine.start();\n            }\n            EventHandler.removeEventListener('start-game-engine');\n        }\n    };\n    GameController.prototype.startNextRoundKeyboardEvent = function (event) {\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            if (this.gameEngine) {\n                EventHandler.removeEventListener('start-new-round');\n                this.startRound();\n            }\n        }\n    };\n    GameController.prototype.drawWinningScreen = function () {\n        var _this = this;\n        this.drawingContext.textAlign = 'middle';\n        var fontSize = 40;\n        this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n        var playersWon = this.playerManager.getPlayers()\n            .filter(function (player) {\n            return player.score === _this.playerManager.getHighestScore();\n        });\n        var textString = playersWon.map(function (player) { return player.name; }).join(', ') + \" won !!!\";\n        var textWidth = this.drawingContext.measureText(textString).width;\n        var xPosition = ((Config.canvasWidth - Config.scoreBoardWith) / 2) - (textWidth / 2);\n        playersWon.forEach(function (player, index) {\n            _this.drawingContext.fillStyle = player.color;\n            var textChunk = \"\" + player.name + (index < playersWon.length - 1 ? ', ' : '');\n            _this.drawingContext.fillText(textChunk, xPosition, (Config.canvasHeight / 2) + (fontSize / 2));\n            xPosition += _this.drawingContext.measureText(textChunk).width;\n        });\n        this.drawingContext.fillStyle = '#ffffff';\n        var textChunk = ' won !!!';\n        this.drawingContext.fillText(textChunk, xPosition, (Config.canvasHeight / 2) + (fontSize / 2));\n        this.fireworkService.start();\n        this.playerManager.resetActiveStatus();\n        this.playerManager.resetScores();\n        EventHandler.addEventListener('start-new-game', document, 'keydown', this.startNewGameKeyboardEvent.bind(this));\n    };\n    GameController.prototype.startNewGameKeyboardEvent = function (event) {\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            EventHandler.removeEventListener('start-new-game');\n            this.fireworkService.stop();\n            this.drawKeySettings();\n        }\n    };\n    GameController.prototype.drawKeySettings = function () {\n        var _this = this;\n        this.drawingContext.clearRect(0, 0, Config.canvasWidth, Config.canvasHeight);\n        this.drawingContext.lineWidth = this.frameLineWidth;\n        this.drawingContext.strokeStyle = '#6E6E6E';\n        this.drawingContext.strokeRect(this.frameLineWidth / 2, this.frameLineWidth / 2, Config.canvasWidth - this.frameLineWidth, Config.canvasHeight - this.frameLineWidth);\n        this.playerManager.getPlayers().forEach(function (player, index) {\n            _this.drawingContext.textAlign = 'middle';\n            var fontSize = 20;\n            _this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n            _this.drawingContext.fillStyle = player.color;\n            _this.drawingContext.fillText(\"( \" + _this.getKeyName(player.leftControl) + \"  \" + _this.getKeyName(player.rightControl) + \" )\", 100, Config.canvasHeight / (_this.playerManager.getPlayers().length + 2) * (index + 1) - (fontSize / 3));\n        });\n        this.drawingContext.textAlign = 'middle';\n        var fontSize = 16;\n        this.drawingContext.font = \"lighter \" + fontSize + \"px Helvetica, Arial, sans-serif\";\n        this.drawingContext.fillStyle = '#ffffff';\n        var textString = 'If 2 or more players have joined, start the game by pressing Space or Enter';\n        var textWidth = this.drawingContext.measureText(textString).width;\n        this.drawingContext.fillText(textString, (Config.canvasWidth / 2) - (textWidth / 2), Config.canvasHeight - 50);\n        EventHandler.addEventListener('toggle-ready-keyboard', document, 'keydown', this.togglePlayerReadyStateKeyboard.bind(this));\n        EventHandler.addEventListener('toggle-ready-mouse', document, 'mousedown', this.togglePlayerReadyStateMouse.bind(this));\n        EventHandler.addEventListener('start-game', document, 'keydown', this.startGameEventListener.bind(this));\n    };\n    GameController.prototype.togglePlayerReadyStateMouse = function (event) {\n        event.preventDefault();\n        if (event.button === 0) {\n            var activePlayer = this.playerManager.getPlayers().find(function (player) {\n                return player.leftControl === EMouseClick.Left;\n            });\n            if (activePlayer) {\n                this.drawPlayerReadyState(activePlayer, true);\n            }\n        }\n        if (event.button === 2) {\n            var activePlayer = this.playerManager.getPlayers().find(function (player) {\n                return player.rightControl === EMouseClick.Right;\n            });\n            if (activePlayer) {\n                this.drawPlayerReadyState(activePlayer, false);\n            }\n        }\n    };\n    GameController.prototype.togglePlayerReadyStateKeyboard = function (event) {\n        var activePlayer = this.playerManager.getPlayers().find(function (player) {\n            return player.leftControl === event.keyCode;\n        });\n        if (activePlayer) {\n            this.drawPlayerReadyState(activePlayer, true);\n        }\n        var inactivePlayer = this.playerManager.getPlayers().find(function (player) {\n            return player.rightControl === event.keyCode;\n        });\n        if (inactivePlayer) {\n            this.drawPlayerReadyState(inactivePlayer, false);\n        }\n    };\n    GameController.prototype.drawPlayerReadyState = function (player, state) {\n        this.drawingContext.textAlign = 'middle';\n        var fontSize = 20;\n        this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n        this.drawingContext.fillStyle = player.color;\n        var playerIndex = this.playerManager.getPlayers().findIndex(function (currentPlayer) {\n            return currentPlayer === player;\n        });\n        var yPosition = Config.canvasHeight / (this.playerManager.getPlayers().length + 2)\n            * (playerIndex + 1) - (fontSize / 3);\n        this.drawingContext.clearRect(390, yPosition - fontSize, 100, fontSize + 5);\n        player.isActive = state;\n        if (state) {\n            this.drawingContext.fillText('READY', 400, yPosition);\n        }\n    };\n    GameController.prototype.getKeyName = function (keyCode) {\n        switch (keyCode) {\n            case EKeyCode.One:\n                return '1';\n            case EKeyCode.Q:\n                return 'Q';\n            case EKeyCode.LAlt:\n                return 'L . Alt';\n            case EKeyCode.RAlt:\n                return 'R . Alt';\n            case EKeyCode.M:\n                return 'M';\n            case EKeyCode.Comma:\n                return ',';\n            case EKeyCode.P:\n                return 'P';\n            case EKeyCode.SZ:\n                return 'ß';\n            case EKeyCode.Left:\n                return 'L . Arrow';\n            case EKeyCode.Down:\n                return 'D . Arrow';\n            case EKeyCode.Y:\n                return 'Y';\n            case EKeyCode.X:\n                return 'X';\n            case EMouseClick.Left:\n                return 'L . Mouse';\n            case EMouseClick.Right:\n                return 'R . Mouse';\n            default:\n                return '';\n        }\n    };\n    GameController.prototype.drawScoreboard = function () {\n        var _this = this;\n        this.drawingContext.clearRect(Config.canvasWidth - Config.scoreBoardWith, 0, Config.canvasWidth, Config.canvasHeight);\n        this.drawingContext.beginPath();\n        this.drawingContext.rect(Config.canvasWidth - Config.scoreBoardWith, this.frameLineWidth / 2, Config.scoreBoardWith - (this.frameLineWidth / 2), Config.canvasHeight - (this.frameLineWidth));\n        this.drawingContext.fillStyle = '#3C3C3C';\n        this.drawingContext.fill();\n        this.drawingContext.lineWidth = this.frameLineWidth;\n        this.drawingContext.strokeStyle = '#6E6E6E';\n        this.drawingContext.stroke();\n        this.playerManager.getPlayers().forEach(function (player, index) {\n            if (!player.isActive) {\n                return;\n            }\n            _this.drawingContext.textAlign = 'middle';\n            var fontSize = Config.canvasHeight / (_this.playerManager.getPlayers().length + 2);\n            _this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n            _this.drawingContext.fillStyle = player.color;\n            _this.drawingContext.fillText((\"\" + player.score).padStart(2, ' '), Config.canvasWidth - (Config.scoreBoardWith / 1.25) - (4 * _this.frameLineWidth), Config.canvasHeight / _this.playerManager.getPlayers().length * (index + 1) - (fontSize / 3));\n        });\n    };\n    GameController.prototype.drawGameFrames = function () {\n        this.drawPlayingFieldFrame();\n        this.drawScoreboard();\n    };\n    GameController.prototype.drawPlayingFieldFrame = function () {\n        this.drawingContext.clearRect(0, 0, Config.canvasWidth - Config.scoreBoardWith, Config.canvasHeight);\n        this.drawingContext.lineWidth = this.frameLineWidth;\n        this.drawingContext.strokeStyle = '#6E6E6E';\n        this.drawingContext.strokeRect(this.frameLineWidth / 2, this.frameLineWidth / 2, Config.canvasWidth - Config.scoreBoardWith - (this.frameLineWidth / 2), Config.canvasHeight - this.frameLineWidth);\n    };\n    GameController.prototype.getMaxScore = function () {\n        return (this.playerManager.getNumberOfActivePlayers() - 1) * 10;\n    };\n    return GameController;\n}());\nexport { GameController };\n","import { Config } from './config';\nimport { getRandomNumber } from './utils';\nimport { EMouseClick } from './keyboard-controls';\nvar PlayerManager = /** @class */ (function () {\n    function PlayerManager() {\n        this.players = new Map();\n    }\n    PlayerManager.prototype.addPlayer = function (player) {\n        if (this.players.has(player.id)) {\n            throw new Error('Player with given Id already existing');\n        }\n        this.players.set(player.id, player);\n        this.bindKeyboardControls(player);\n    };\n    PlayerManager.prototype.removePlayer = function (player) {\n        this.players.delete(player.id);\n        // technically we need to unbind keyboard controls here\n        // method currently unused so ¯\\_(ツ)_/¯\n    };\n    PlayerManager.prototype.initializePlayers = function () {\n        Array.from(this.players.values())\n            .filter(function (player) {\n            return player.isActive;\n        })\n            .forEach(function (player) {\n            player.xPosition = getRandomNumber((Config.canvasWidth - Config.scoreBoardWith) / 5, 4 * (Config.canvasWidth - Config.scoreBoardWith) / 5);\n            player.yPosition = getRandomNumber(Config.canvasHeight / 5, 4 * Config.canvasHeight / 5);\n            player.angle = Math.random() * 360;\n            player.isAlive = true;\n        });\n    };\n    PlayerManager.prototype.bindKeyboardControls = function (player) {\n        // Todo: To beb consistent we should use the EventHandler here...\n        document.addEventListener('keydown', function (event) {\n            event.preventDefault();\n            if (event.keyCode === player.leftControl) {\n                player.isTurningLeft = true;\n            }\n            if (event.keyCode === player.rightControl) {\n                player.isTurningRight = true;\n            }\n        });\n        document.addEventListener('keyup', function (event) {\n            event.preventDefault();\n            if (event.keyCode === player.leftControl) {\n                player.isTurningLeft = false;\n            }\n            if (event.keyCode === player.rightControl) {\n                player.isTurningRight = false;\n            }\n        });\n        document.addEventListener('mousedown', function (event) {\n            event.preventDefault();\n            if (event.button === 0) {\n                if (player.leftControl === EMouseClick.Left) {\n                    player.isTurningLeft = true;\n                }\n                if (player.rightControl === EMouseClick.Left) {\n                    player.isTurningRight = true;\n                }\n            }\n            if (event.button === 2) {\n                if (player.leftControl === EMouseClick.Right) {\n                    player.isTurningLeft = true;\n                }\n                if (player.rightControl === EMouseClick.Right) {\n                    player.isTurningRight = true;\n                }\n            }\n        });\n        document.addEventListener('mouseup', function (event) {\n            event.preventDefault();\n            if (event.button === 0) {\n                if (player.leftControl === EMouseClick.Left) {\n                    player.isTurningLeft = false;\n                }\n                if (player.rightControl === EMouseClick.Left) {\n                    player.isTurningRight = false;\n                }\n            }\n            if (event.button === 2) {\n                if (player.leftControl === EMouseClick.Right) {\n                    player.isTurningLeft = false;\n                }\n                if (player.rightControl === EMouseClick.Right) {\n                    player.isTurningRight = false;\n                }\n            }\n        });\n    };\n    PlayerManager.prototype.getPlayers = function () {\n        return Array.from(this.players.values());\n    };\n    PlayerManager.prototype.getNumberOfActivePlayers = function () {\n        return this.getPlayers().filter(function (player) {\n            return player.isActive;\n        }).length;\n    };\n    PlayerManager.prototype.updateScores = function (ranks) {\n        var _this = this;\n        ranks.forEach(function (player, index) {\n            player.score += _this.getNumberOfActivePlayers() - index - 1;\n        });\n    };\n    PlayerManager.prototype.getHighestScore = function () {\n        var scores = Array.from(this.players.values()).map(function (player) {\n            return player.score;\n        });\n        return Math.max.apply(Math, scores);\n    };\n    PlayerManager.prototype.resetActiveStatus = function () {\n        Array.from(this.players.values()).forEach(function (player) {\n            player.isActive = false;\n        });\n    };\n    PlayerManager.prototype.resetScores = function () {\n        Array.from(this.players.values()).forEach(function (player) {\n            player.score = 0;\n        });\n    };\n    return PlayerManager;\n}());\nexport { PlayerManager };\n","var Player = /** @class */ (function () {\n    function Player(id, name, color, leftControl, rightControl) {\n        this._xPosition = 0;\n        this._yPosition = 0;\n        this._angle = 0;\n        this._isAlive = false;\n        this._score = 0;\n        this._isTurningLeft = false;\n        this._isTurningRight = false;\n        this._isActive = false;\n        this._id = id;\n        this._name = name;\n        this._color = color;\n        this._leftControl = leftControl;\n        this._rightControl = rightControl;\n    }\n    Object.defineProperty(Player.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"xPosition\", {\n        get: function () {\n            return this._xPosition;\n        },\n        set: function (value) {\n            this._xPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"yPosition\", {\n        get: function () {\n            return this._yPosition;\n        },\n        set: function (value) {\n            this._yPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"angle\", {\n        get: function () {\n            return this._angle;\n        },\n        set: function (value) {\n            this._angle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isAlive\", {\n        get: function () {\n            return this._isAlive;\n        },\n        set: function (value) {\n            this._isAlive = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"score\", {\n        get: function () {\n            return this._score;\n        },\n        set: function (value) {\n            this._score = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isTurningLeft\", {\n        get: function () {\n            return this._isTurningLeft;\n        },\n        set: function (value) {\n            this._isTurningLeft = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isTurningRight\", {\n        get: function () {\n            return this._isTurningRight;\n        },\n        set: function (value) {\n            this._isTurningRight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"leftControl\", {\n        get: function () {\n            return this._leftControl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"rightControl\", {\n        get: function () {\n            return this._rightControl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isActive\", {\n        get: function () {\n            return this._isActive;\n        },\n        set: function (value) {\n            this._isActive = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Player;\n}());\nexport { Player };\n","import { GameController } from './game-controller';\nimport { PlayerManager } from './player-manager';\nimport { Player } from './player';\nimport { EColor } from './color';\nimport { Config } from './config';\nimport { EKeyCode, EMouseClick } from './keyboard-controls';\nimport { EventHandler } from './event-handler';\nwindow.onload = function () {\n    Config.canvasWidth = IS_ELECTRON_BUILD ? document.body.clientWidth : document.body.clientWidth - 20;\n    Config.canvasHeight = IS_ELECTRON_BUILD ? document.body.clientHeight : document.body.clientHeight - 50;\n    var canvasId = 'canvas';\n    var canvasElement = document.getElementById(canvasId);\n    if (!canvasElement) {\n        throw new Error('No canvas element found');\n    }\n    canvasElement.width = Config.canvasWidth;\n    canvasElement.height = Config.canvasHeight;\n    var drawingContext;\n    if (canvasElement.getContext) {\n        drawingContext = canvasElement.getContext('2d');\n    }\n    else {\n        throw new Error('No canvas support');\n    }\n    drawIntroText();\n    EventHandler.oneTimeEventListener(document, 'keydown', initGame);\n    function drawIntroText() {\n        var frameLineWidth = 5;\n        drawingContext.lineWidth = frameLineWidth;\n        drawingContext.strokeStyle = '#6E6E6E';\n        drawingContext.strokeRect(frameLineWidth / 2, frameLineWidth / 2, Config.canvasWidth - frameLineWidth, Config.canvasHeight - frameLineWidth);\n        drawingContext.textAlign = 'middle';\n        var fontSize = Config.canvasHeight / 10;\n        drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n        drawingContext.fillStyle = '#ffffff';\n        var textString = 'Achtung, die Kurve !';\n        var textWidth = drawingContext.measureText(textString).width;\n        drawingContext.fillText(textString, (Config.canvasWidth / 2) - (textWidth / 2), (Config.canvasHeight / 2) + (fontSize / 2));\n        drawingContext.textAlign = 'middle';\n        drawingContext.font = \"lighter 16px Helvetica, Arial, sans-serif\";\n        drawingContext.fillStyle = '#ffffff';\n        textString = 'Press any key to continue';\n        textWidth = drawingContext.measureText(textString).width;\n        drawingContext.fillText(textString, (Config.canvasWidth / 2) - (textWidth / 2), Config.canvasHeight - 50);\n    }\n    function initGame() {\n        var playerManager = new PlayerManager();\n        var player1 = new Player(1, 'Player 1', EColor.Red, EKeyCode.One, EKeyCode.Q);\n        playerManager.addPlayer(player1);\n        var player2 = new Player(2, 'Player 2', EColor.Yellow, EKeyCode.Y, EKeyCode.X);\n        playerManager.addPlayer(player2);\n        var player3 = new Player(3, 'Player 3', EColor.Orange, EKeyCode.M, EKeyCode.Comma);\n        playerManager.addPlayer(player3);\n        var player4 = new Player(4, 'Player 4', EColor.Green, EKeyCode.Left, EKeyCode.Down);\n        playerManager.addPlayer(player4);\n        var player5 = new Player(5, 'Player 5', EColor.Pink, EKeyCode.P, EKeyCode.SZ);\n        playerManager.addPlayer(player5);\n        var player6 = new Player(6, 'Player 6', EColor.Blue, EMouseClick.Left, EMouseClick.Right);\n        playerManager.addPlayer(player6);\n        var game = new GameController(drawingContext, playerManager);\n    }\n};\n"],"sourceRoot":""}