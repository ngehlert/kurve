{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/config.ts","webpack:///./src/keyboard-controls.ts","webpack:///./src/utils.ts","webpack:///./src/event-handler.ts","webpack:///./src/color.ts","webpack:///./src/game-engine.ts","webpack:///./src/firework/config.ts","webpack:///./src/firework/particle.ts","webpack:///./src/firework/firework.ts","webpack:///./src/firework/star.ts","webpack:///./src/firework/firework-service.ts","webpack:///./src/game-controller.ts","webpack:///./src/player-manager.ts","webpack:///./src/player.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","EKeyCode","EMouseClick","Config","canvasWidth","canvasHeight","lineWidth","fps","angleModifier","pixelsPerSecond","scoreBoardWith","holeSize","holeFrequency","getRandomNumber","minimum","maximum","Math","floor","random","EColor","EventHandler","addEventListener","node","eventName","callback","callbackListener","event","this","eventCallbacks","set","removeEventListener","entry","delete","oneTimeEventListener","Map","game_engine_GameEngine","GameEngine","canvas","players","interval","stepsUntilHolePerPlayer","holeSizePerPlayer","speed","playerRanks","canvasContext","start","_this","Promise","resolve","reject","resolveCallback","draw","document","startDrawingIntervalEvent","bind","keyCode","Space","Enter","setInterval","stop","clearInterval","filter","player","isActive","isAlive","forEach","isTurningLeft","angle","isTurningRight","deltaX","cos","PI","deltaY","sin","hitTest","x","xPosition","y","yPosition","unshift","alivePlayers","length","has","id","getStepsUntilNextHole","strokeStyle","color","fillStyle","beginPath","moveTo","lineTo","stroke","point","getImageData","data","FireworkConfig","minStrength","maxStrength","minTrails","maxTrails","gravity","airResistance","numberOfStars","fireworkLifeTime","trailLength","delay","particle_Particle","Particle","drawingContext","vx","vy","ax","ay","lifeTime","radius","path","update","shift","push","opacity","trunc","closePath","fill","arc","firework_Firework","Firework","strength","life","particles","star_Star","Star","maxStarRadius","flashingFactor","b","firework_service_FireworkService","FireworkService","withStars","stars","isRunning","mainWithThis","main","firework1","firework2","createStars","saveDrawingSurface","animationId","window","cancelAnimationFrame","restoreDrawingSurface","star","requestAnimationFrame","previousState","putImageData","game_controller_GameController","GameController","playerManager","frameLineWidth","fireworkService","drawKeySettings","startGameEventListener","getNumberOfActivePlayers","drawGameFrames","gameEngine","getPlayers","initializePlayers","startRound","drawPlayingFieldFrame","then","ranks","updateScores","drawScoreboard","getHighestScore","getMaxScore","drawWinningScreen","startNextRoundKeyboardEvent","textAlign","font","fontSize","playersWon","score","textString","map","join","textWidth","measureText","width","index","textChunk","fillText","resetActiveStatus","resetScores","startNewGameKeyboardEvent","clearRect","strokeRect","getKeyName","leftControl","rightControl","togglePlayerReadyStateKeyboard","togglePlayerReadyStateMouse","activePlayer","preventDefault","button","find","Left","drawPlayerReadyState","Right","inactivePlayer","state","playerIndex","findIndex","currentPlayer","One","Q","LAlt","RAlt","M","Comma","P","SZ","Down","Y","X","rect","player_manager_PlayerManager","PlayerManager","addPlayer","Error","bindKeyboardControls","removePlayer","Array","from","values","scores","max","apply","Player","_xPosition","_yPosition","_angle","_isAlive","_score","_isTurningLeft","_isTurningRight","_isActive","_id","_name","_color","_leftControl","_rightControl","onload","body","clientWidth","clientHeight","canvasElement","getElementById","height","getContext","drawIntroText","player1","Red","player2","Yellow","player3","Orange","player4","Green","player5","Pink","player6","Blue"],"mappings":"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","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var Config = /** @class */ (function () {\n    function Config() {\n    }\n    Config.canvasWidth = 0;\n    Config.canvasHeight = 0;\n    Config.lineWidth = 4;\n    Config.fps = 80;\n    /**\n     * Defines how many degrees a line should turn when turning left/right\n     */\n    Config.angleModifier = 2;\n    /**\n     * Defines the speed\n     */\n    Config.pixelsPerSecond = 100;\n    Config.scoreBoardWith = 150;\n    /**\n     * the width of holes\n     */\n    Config.holeSize = 10;\n    /**\n     * Defines the frequency with that holes appear. the lower, the less holes appear.\n     * Has to be greater than 0.\n     */\n    Config.holeFrequency = 10;\n    return Config;\n}());\nexport { Config };\n","var EKeyCode;\n(function (EKeyCode) {\n    EKeyCode[EKeyCode[\"One\"] = 49] = \"One\";\n    EKeyCode[EKeyCode[\"Q\"] = 81] = \"Q\";\n    EKeyCode[EKeyCode[\"LAlt\"] = 17] = \"LAlt\";\n    EKeyCode[EKeyCode[\"RAlt\"] = 18] = \"RAlt\";\n    EKeyCode[EKeyCode[\"M\"] = 77] = \"M\";\n    EKeyCode[EKeyCode[\"Comma\"] = 188] = \"Comma\";\n    EKeyCode[EKeyCode[\"P\"] = 80] = \"P\";\n    EKeyCode[EKeyCode[\"SZ\"] = 189] = \"SZ\";\n    EKeyCode[EKeyCode[\"Left\"] = 37] = \"Left\";\n    EKeyCode[EKeyCode[\"Down\"] = 40] = \"Down\";\n    EKeyCode[EKeyCode[\"Space\"] = 32] = \"Space\";\n    EKeyCode[EKeyCode[\"Enter\"] = 13] = \"Enter\";\n    EKeyCode[EKeyCode[\"Y\"] = 89] = \"Y\";\n    EKeyCode[EKeyCode[\"X\"] = 88] = \"X\";\n})(EKeyCode || (EKeyCode = {}));\nvar EMouseClick;\n(function (EMouseClick) {\n    EMouseClick[\"Left\"] = \"Left\";\n    EMouseClick[\"Right\"] = \"Right\";\n})(EMouseClick || (EMouseClick = {}));\nexport { EKeyCode, EMouseClick };\n","function getRandomNumber(minimum, maximum) {\n    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n}\nexport { getRandomNumber };\n","var EventHandler = /** @class */ (function () {\n    function EventHandler() {\n    }\n    /**\n     * Registers a new event listener and adds it to the stack.\n     *\n     * @param {string} name of the function. should be unique. otherwise there will be conflicts\n     * @param {Node} node that registers the event. Usually something like document or element\n     * @param {string} eventName of the DOM Event that triggers the action.\n     * For example keydown, keyup, mousedown, etc.\n     * @param callback that will eventually be executed.\n     */\n    EventHandler.addEventListener = function (name, node, eventName, callback) {\n        var callbackListener = function (event) {\n            return callback(event);\n        };\n        node.addEventListener(eventName, callbackListener);\n        this.eventCallbacks.set(name, { node: node, eventName: eventName, callback: callbackListener });\n    };\n    /**\n     * Removes an existing event listener\n     *\n     * @param {string} name of the event\n     */\n    EventHandler.removeEventListener = function (name) {\n        var entry = this.eventCallbacks.get(name);\n        if (entry) {\n            entry.node.removeEventListener(entry.eventName, entry.callback);\n            this.eventCallbacks.delete(name);\n        }\n    };\n    /**\n     * Registers a one time event that will automatically deregister itself after being executed once\n     *\n     * @param {Node} node that registers the event. Usually something like document or element\n     * @param {string} eventName of the DOM Event that triggers the action.\n     * For example keydown, keyup, mousedown, etc.\n     * @param callback that will eventually be executed.\n     */\n    EventHandler.oneTimeEventListener = function (node, eventName, callback) {\n        var callbackListener = function (event) {\n            node.removeEventListener(eventName, callbackListener);\n            return callback(event);\n        };\n        node.addEventListener(eventName, callbackListener);\n    };\n    /**\n     * Stack that holds events until they are eventually deregistered\n     */\n    EventHandler.eventCallbacks = new Map();\n    return EventHandler;\n}());\nexport { EventHandler };\n","var EColor;\n(function (EColor) {\n    EColor[\"Red\"] = \"#CC361F\";\n    EColor[\"Yellow\"] = \"#DBDE4B\";\n    EColor[\"Orange\"] = \"#EC7B34\";\n    EColor[\"Green\"] = \"#5FD441\";\n    EColor[\"Pink\"] = \"#DA4FAF\";\n    EColor[\"Blue\"] = \"#4AAAD7\";\n})(EColor || (EColor = {}));\nexport { EColor };\n","import { Config } from './config';\nimport { getRandomNumber } from './utils';\nimport { EKeyCode } from './keyboard-controls';\nimport { EventHandler } from './event-handler';\nvar GameEngine = /** @class */ (function () {\n    function GameEngine(canvas, players) {\n        this.interval = 0;\n        this.stepsUntilHolePerPlayer = new Map();\n        this.holeSizePerPlayer = new Map();\n        this.speed = Config.pixelsPerSecond * (1000 / Config.fps / 1000);\n        this.playerRanks = [];\n        this.canvasContext = canvas;\n        this.players = players;\n    }\n    GameEngine.prototype.start = function () {\n        var _this = this;\n        if (this.interval) {\n            return new Promise(function (resolve) { return resolve([]); });\n        }\n        return new Promise(function (resolve, reject) {\n            _this.resolveCallback = resolve;\n            _this.playerRanks = [];\n            // Start drawing first few pixels so everybody knows his start position\n            _this.draw();\n            _this.draw();\n            _this.draw();\n            _this.draw();\n            EventHandler.addEventListener('draw', document, 'keydown', _this.startDrawingIntervalEvent.bind(_this));\n        });\n    };\n    GameEngine.prototype.startDrawingIntervalEvent = function (event) {\n        var _this = this;\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            if (!this.interval) {\n                this.interval = setInterval(function () {\n                    EventHandler.removeEventListener('draw');\n                    _this.draw();\n                }, 1000 / Config.fps);\n            }\n        }\n    };\n    GameEngine.prototype.stop = function () {\n        clearInterval(this.interval);\n        this.interval = 0;\n        if (this.resolveCallback) {\n            this.resolveCallback(this.playerRanks);\n        }\n    };\n    GameEngine.prototype.draw = function () {\n        var _this = this;\n        this.players\n            .filter(function (player) {\n            return player.isActive && player.isAlive;\n        })\n            .forEach(function (player) {\n            if (player.isTurningLeft) {\n                player.angle -= Config.angleModifier;\n            }\n            if (player.isTurningRight) {\n                player.angle += Config.angleModifier;\n            }\n            var deltaX = Math.cos(player.angle * Math.PI / 180) * _this.speed;\n            var deltaY = Math.sin(player.angle * Math.PI / 180) * _this.speed;\n            if (_this.hitTest({ x: player.xPosition + deltaX, y: player.yPosition + deltaY })) {\n                _this.playerRanks.unshift(player);\n                player.isAlive = false;\n                var alivePlayers = _this.players.filter(function (player) {\n                    return player.isAlive;\n                });\n                if (alivePlayers.length < 2) {\n                    alivePlayers.forEach(function (player) {\n                        _this.playerRanks.unshift(player);\n                    });\n                    _this.stop();\n                }\n            }\n            if (!_this.stepsUntilHolePerPlayer.has(player.id)) {\n                _this.stepsUntilHolePerPlayer.set(player.id, _this.getStepsUntilNextHole());\n            }\n            if (_this.stepsUntilHolePerPlayer.get(player.id) === 0) {\n                if (!_this.holeSizePerPlayer.has(player.id)) {\n                    _this.holeSizePerPlayer.set(player.id, 0);\n                }\n                else {\n                    var holeSize = (_this.holeSizePerPlayer.get(player.id) || 0) + 1;\n                    _this.holeSizePerPlayer.set(player.id, holeSize);\n                    if (holeSize >= Config.holeSize) {\n                        _this.stepsUntilHolePerPlayer.set(player.id, _this.getStepsUntilNextHole());\n                        _this.holeSizePerPlayer.set(player.id, 0);\n                    }\n                }\n            }\n            else {\n                _this.stepsUntilHolePerPlayer.set(player.id, (_this.stepsUntilHolePerPlayer.get(player.id) || 1) - 1);\n                _this.canvasContext.strokeStyle = player.color;\n                _this.canvasContext.fillStyle = player.color;\n                _this.canvasContext.beginPath();\n                _this.canvasContext.lineWidth = Config.lineWidth;\n                _this.canvasContext.moveTo(player.xPosition, player.yPosition);\n                _this.canvasContext.lineTo(player.xPosition + deltaX, player.yPosition + deltaY);\n                _this.canvasContext.stroke();\n            }\n            player.xPosition += deltaX;\n            player.yPosition += deltaY;\n        });\n    };\n    GameEngine.prototype.getStepsUntilNextHole = function () {\n        return Math.floor(getRandomNumber(1, 100) * (100 / Config.holeFrequency));\n    };\n    GameEngine.prototype.hitTest = function (point) {\n        if (point.x > Config.canvasWidth || point.y > Config.canvasHeight || point.x < 0 || point.y < 0) {\n            return true;\n        }\n        if (this.canvasContext.getImageData(point.x, point.y, 1, 1).data[3] > 100) {\n            return true;\n        }\n        return false;\n    };\n    return GameEngine;\n}());\nexport { GameEngine };\n","var FireworkConfig = /** @class */ (function () {\n    function FireworkConfig() {\n    }\n    FireworkConfig.minStrength = 1.5;\n    FireworkConfig.maxStrength = 7;\n    FireworkConfig.minTrails = 10;\n    FireworkConfig.maxTrails = 30;\n    FireworkConfig.gravity = 5e-2;\n    FireworkConfig.airResistance = 1e-3;\n    FireworkConfig.numberOfStars = 150;\n    FireworkConfig.fireworkLifeTime = 150;\n    FireworkConfig.trailLength = 150;\n    FireworkConfig.delay = 0.5;\n    return FireworkConfig;\n}());\nexport { FireworkConfig };\n","import { FireworkConfig } from './config';\nvar Particle = /** @class */ (function () {\n    function Particle(drawingContext, x, y, vx, vy, ax, ay, color) {\n        this.drawingContext = drawingContext;\n        this.x = x;\n        this.y = y;\n        this.vx = vx;\n        this.vy = vy;\n        this.ax = ax;\n        this.ay = ay;\n        this.color = color;\n        this.lifeTime = FireworkConfig.fireworkLifeTime;\n        this.radius = 3;\n        this.path = [];\n    }\n    Particle.prototype.update = function () {\n        this.lifeTime--;\n        // add point to path but if full, remove a point first\n        if (this.path.length >= FireworkConfig.trailLength)\n            this.path.shift();\n        this.path.push([this.x, this.y]);\n        // update speed n position n stuff\n        this.vy += this.ay;\n        this.vx += this.ax;\n        this.x += this.vx;\n        this.y += this.vy;\n    };\n    Particle.prototype.draw = function () {\n        var opacity = Math.trunc(this.lifeTime * 100 / FireworkConfig.fireworkLifeTime) / 100;\n        // tail\n        this.drawingContext.fillStyle = \"rgba(\" + this.color + \",\" + opacity * 0.4 + \")\";\n        if (this.lifeTime > FireworkConfig.fireworkLifeTime * 0.95) {\n            this.drawingContext.fillStyle = '#fff';\n        }\n        this.drawingContext.lineWidth = 40;\n        this.drawingContext.beginPath();\n        this.drawingContext.moveTo(this.x - this.radius, this.y);\n        this.drawingContext.lineTo(this.path[0][0], this.path[0][1]);\n        this.drawingContext.lineTo(this.x + this.radius, this.y);\n        this.drawingContext.closePath();\n        this.drawingContext.fill();\n        // main dot\n        this.drawingContext.fillStyle = \"rgba(\" + this.color + \",\" + opacity + \")\";\n        if (this.lifeTime > FireworkConfig.fireworkLifeTime * 0.95) {\n            this.drawingContext.fillStyle = '#fff';\n        }\n        this.drawingContext.beginPath();\n        this.drawingContext.arc(Math.trunc(this.x), Math.trunc(this.y), this.radius, 0, Math.PI * 2);\n        this.drawingContext.fill();\n        this.drawingContext.closePath();\n    };\n    return Particle;\n}());\nexport { Particle };\n","import { Config } from '../config';\nimport { Particle } from './particle';\nimport { FireworkConfig } from './config';\nvar Firework = /** @class */ (function () {\n    function Firework(drawingContext) {\n        this.drawingContext = drawingContext;\n        this.x = Config.canvasWidth * (Math.random() * 0.8 + 0.1); // from 0.1-0.9 widths\n        this.y = Config.canvasHeight * (Math.random() * 0.8 + 0.1); // from 0.1-0.9 heights\n        this.strength = Math.random() * (FireworkConfig.maxStrength - FireworkConfig.minStrength)\n            + FireworkConfig.minStrength;\n        this.color = Math.trunc(Math.random() * 255) + \",\" + Math.trunc(Math.random() * 255) + \",\"\n            + (\"\" + Math.trunc(Math.random() * 255));\n        this.life = 0;\n        this.particles = [];\n        var n = ~~(Math.random() * (FireworkConfig.maxTrails - FireworkConfig.minTrails)) + FireworkConfig.minTrails;\n        var ay = FireworkConfig.gravity;\n        for (var i = n; i--;) {\n            var ax = FireworkConfig.airResistance;\n            var angle = i * Math.PI * 2 / n;\n            if (angle < Math.PI) {\n                ax *= -1;\n            }\n            var vx = this.strength * Math.sin(angle);\n            var vy = this.strength * Math.cos(angle);\n            this.particles.push(new Particle(drawingContext, this.x, this.y, vx, vy, ax, ay, this.color));\n        }\n    }\n    Firework.prototype.update = function () {\n        this.life++;\n        if (this.life < 0) {\n            return; // allows life to be delayed\n        }\n        for (var i = this.particles.length; i--;) {\n            this.particles[i].update();\n            this.particles[i].draw();\n        }\n    };\n    return Firework;\n}());\nexport { Firework };\n","import { Config } from '../config';\nvar Star = /** @class */ (function () {\n    function Star(drawingContext) {\n        this.drawingContext = drawingContext;\n        this.maxStarRadius = 3;\n        this.flashingFactor = 0.4;\n        this.x = Math.random() * Config.canvasWidth;\n        this.y = Math.random() * Config.canvasHeight;\n        this.r = Math.random() * this.maxStarRadius;\n        this.b = Math.trunc(Math.random() * 100) / 100;\n    }\n    Star.prototype.draw = function () {\n        this.b += this.flashingFactor * (Math.random() - .5);\n        this.drawingContext.fillStyle = 'rgba(255,255,255,' + this.b + ')';\n        this.drawingContext.beginPath();\n        this.drawingContext.arc(Math.trunc(this.x), Math.trunc(this.y), this.r, 0, Math.PI * 2);\n        this.drawingContext.fill();\n        this.drawingContext.closePath();\n    };\n    return Star;\n}());\nexport { Star };\n","import { Firework } from './firework';\nimport { Star } from './star';\nimport { Config } from '../config';\nimport { FireworkConfig } from './config';\nvar FireworkService = /** @class */ (function () {\n    function FireworkService(drawingContext, withStars) {\n        this.drawingContext = drawingContext;\n        this.withStars = withStars;\n        this.stars = [];\n        this.isRunning = false;\n        this.mainWithThis = this.main.bind(this);\n        this.firework1 = new Firework(this.drawingContext);\n        this.firework2 = new Firework(this.drawingContext);\n        this.firework2.life = -FireworkConfig.fireworkLifeTime - FireworkConfig.delay;\n        if (this.withStars) {\n            this.createStars();\n        }\n    }\n    FireworkService.prototype.start = function () {\n        this.saveDrawingSurface();\n        this.isRunning = true;\n        this.main();\n    };\n    FireworkService.prototype.stop = function () {\n        this.isRunning = false;\n        if (this.animationId) {\n            window.cancelAnimationFrame(this.animationId);\n        }\n    };\n    FireworkService.prototype.createStars = function () {\n        for (var i = 0; i < FireworkConfig.numberOfStars; i++) {\n            this.stars.push(new Star(this.drawingContext));\n        }\n    };\n    FireworkService.prototype.main = function () {\n        if (this.isRunning) {\n            this.restoreDrawingSurface();\n        }\n        else {\n            return;\n        }\n        this.stars.forEach(function (star) {\n            star.draw();\n        });\n        this.firework1.update();\n        this.firework2.update();\n        if (this.firework1.life === FireworkConfig.fireworkLifeTime * FireworkConfig.delay) {\n            this.firework2 = new Firework(this.drawingContext);\n        }\n        if (this.firework2.life === FireworkConfig.fireworkLifeTime * FireworkConfig.delay) {\n            this.firework1 = new Firework(this.drawingContext);\n        }\n        if (this.isRunning) {\n            this.animationId = window.requestAnimationFrame(this.mainWithThis);\n        }\n    };\n    FireworkService.prototype.saveDrawingSurface = function () {\n        this.previousState = this.drawingContext.getImageData(0, 0, Config.canvasWidth, Config.canvasHeight);\n    };\n    FireworkService.prototype.restoreDrawingSurface = function () {\n        if (this.previousState) {\n            this.drawingContext.putImageData(this.previousState, 0, 0);\n        }\n    };\n    return FireworkService;\n}());\nexport { FireworkService };\n","import { Config } from './config';\nimport { GameEngine } from './game-engine';\nimport { EKeyCode, EMouseClick } from './keyboard-controls';\nimport { EventHandler } from './event-handler';\nimport { FireworkService } from './firework/firework-service';\nvar GameController = /** @class */ (function () {\n    function GameController(drawingContext, playerManager) {\n        this.drawingContext = drawingContext;\n        this.playerManager = playerManager;\n        this.frameLineWidth = 5;\n        this.fireworkService = new FireworkService(this.drawingContext, false);\n        this.drawKeySettings();\n    }\n    /**\n     * This basically starts an entire game.\n     */\n    GameController.prototype.startGameEventListener = function (event) {\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            if (this.playerManager.getNumberOfActivePlayers() < 2) {\n                return;\n            }\n            this.drawGameFrames();\n            this.gameEngine = new GameEngine(this.drawingContext, this.playerManager.getPlayers());\n            this.playerManager.initializePlayers();\n            this.startRound();\n            EventHandler.removeEventListener('toggle-ready-keyboard');\n            EventHandler.removeEventListener('toggle-ready-mouse');\n            EventHandler.removeEventListener('start-game');\n        }\n    };\n    /**\n     * Starts a new round.\n     */\n    GameController.prototype.startRound = function () {\n        var _this = this;\n        this.drawPlayingFieldFrame();\n        this.playerManager.initializePlayers();\n        if (this.gameEngine) {\n            this.gameEngine.start()\n                .then(function (ranks) {\n                _this.playerManager.updateScores(ranks);\n                _this.drawScoreboard();\n                if (_this.playerManager.getHighestScore() >= _this.getMaxScore()) {\n                    _this.drawWinningScreen();\n                }\n                else {\n                    EventHandler.addEventListener('start-new-round', document, 'keydown', _this.startNextRoundKeyboardEvent.bind(_this));\n                }\n            });\n        }\n    };\n    GameController.prototype.startNextRoundKeyboardEvent = function (event) {\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            if (this.gameEngine) {\n                EventHandler.removeEventListener('start-new-round');\n                this.startRound();\n            }\n        }\n    };\n    GameController.prototype.drawWinningScreen = function () {\n        var _this = this;\n        this.drawingContext.textAlign = 'middle';\n        var fontSize = 40;\n        this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n        var playersWon = this.playerManager.getPlayers()\n            .filter(function (player) {\n            return player.score === _this.playerManager.getHighestScore();\n        });\n        var textString = playersWon.map(function (player) { return player.name; }).join(', ') + \" won !!!\";\n        var textWidth = this.drawingContext.measureText(textString).width;\n        var xPosition = ((Config.canvasWidth - Config.scoreBoardWith) / 2) - (textWidth / 2);\n        playersWon.forEach(function (player, index) {\n            _this.drawingContext.fillStyle = player.color;\n            var textChunk = \"\" + player.name + (index < playersWon.length - 1 ? ', ' : '');\n            _this.drawingContext.fillText(textChunk, xPosition, (Config.canvasHeight / 2) + (fontSize / 2));\n            xPosition += _this.drawingContext.measureText(textChunk).width;\n        });\n        this.drawingContext.fillStyle = '#ffffff';\n        var textChunk = ' won !!!';\n        this.drawingContext.fillText(textChunk, xPosition, (Config.canvasHeight / 2) + (fontSize / 2));\n        this.fireworkService.start();\n        this.playerManager.resetActiveStatus();\n        this.playerManager.resetScores();\n        EventHandler.addEventListener('start-new-game', document, 'keydown', this.startNewGameKeyboardEvent.bind(this));\n    };\n    GameController.prototype.startNewGameKeyboardEvent = function (event) {\n        if (event.keyCode === EKeyCode.Space || event.keyCode === EKeyCode.Enter) {\n            EventHandler.removeEventListener('start-new-game');\n            this.fireworkService.stop();\n            this.drawKeySettings();\n        }\n    };\n    GameController.prototype.drawKeySettings = function () {\n        var _this = this;\n        this.drawingContext.clearRect(0, 0, Config.canvasWidth, Config.canvasHeight);\n        this.drawingContext.lineWidth = this.frameLineWidth;\n        this.drawingContext.strokeStyle = '#6E6E6E';\n        this.drawingContext.strokeRect(this.frameLineWidth / 2, this.frameLineWidth / 2, Config.canvasWidth - this.frameLineWidth, Config.canvasHeight - this.frameLineWidth);\n        this.playerManager.getPlayers().forEach(function (player, index) {\n            _this.drawingContext.textAlign = 'middle';\n            var fontSize = 20;\n            _this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n            _this.drawingContext.fillStyle = player.color;\n            _this.drawingContext.fillText(\"( \" + _this.getKeyName(player.leftControl) + \"  \" + _this.getKeyName(player.rightControl) + \" )\", 100, Config.canvasHeight / (_this.playerManager.getPlayers().length + 2) * (index + 1) - (fontSize / 3));\n        });\n        this.drawingContext.textAlign = 'middle';\n        var fontSize = 16;\n        this.drawingContext.font = \"lighter \" + fontSize + \"px Helvetica, Arial, sans-serif\";\n        this.drawingContext.fillStyle = '#ffffff';\n        var textString = 'If 2 or more players have joined, start the game by pressing Space or Enter';\n        var textWidth = this.drawingContext.measureText(textString).width;\n        this.drawingContext.fillText(textString, (Config.canvasWidth / 2) - (textWidth / 2), Config.canvasHeight - 50);\n        EventHandler.addEventListener('toggle-ready-keyboard', document, 'keydown', this.togglePlayerReadyStateKeyboard.bind(this));\n        EventHandler.addEventListener('toggle-ready-mouse', document, 'mousedown', this.togglePlayerReadyStateMouse.bind(this));\n        EventHandler.addEventListener('start-game', document, 'keydown', this.startGameEventListener.bind(this));\n    };\n    GameController.prototype.togglePlayerReadyStateMouse = function (event) {\n        event.preventDefault();\n        if (event.button === 0) {\n            var activePlayer = this.playerManager.getPlayers().find(function (player) {\n                return player.leftControl === EMouseClick.Left;\n            });\n            if (activePlayer) {\n                this.drawPlayerReadyState(activePlayer, true);\n            }\n        }\n        if (event.button === 2) {\n            var activePlayer = this.playerManager.getPlayers().find(function (player) {\n                return player.rightControl === EMouseClick.Right;\n            });\n            if (activePlayer) {\n                this.drawPlayerReadyState(activePlayer, false);\n            }\n        }\n    };\n    GameController.prototype.togglePlayerReadyStateKeyboard = function (event) {\n        var activePlayer = this.playerManager.getPlayers().find(function (player) {\n            return player.leftControl === event.keyCode;\n        });\n        if (activePlayer) {\n            this.drawPlayerReadyState(activePlayer, true);\n        }\n        var inactivePlayer = this.playerManager.getPlayers().find(function (player) {\n            return player.rightControl === event.keyCode;\n        });\n        if (inactivePlayer) {\n            this.drawPlayerReadyState(inactivePlayer, false);\n        }\n    };\n    GameController.prototype.drawPlayerReadyState = function (player, state) {\n        this.drawingContext.textAlign = 'middle';\n        var fontSize = 20;\n        this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n        this.drawingContext.fillStyle = player.color;\n        var playerIndex = this.playerManager.getPlayers().findIndex(function (currentPlayer) {\n            return currentPlayer === player;\n        });\n        var yPosition = Config.canvasHeight / (this.playerManager.getPlayers().length + 2)\n            * (playerIndex + 1) - (fontSize / 3);\n        this.drawingContext.clearRect(390, yPosition - fontSize, 100, fontSize + 5);\n        player.isActive = state;\n        if (state) {\n            this.drawingContext.fillText('READY', 400, yPosition);\n        }\n    };\n    GameController.prototype.getKeyName = function (keyCode) {\n        switch (keyCode) {\n            case EKeyCode.One:\n                return '1';\n            case EKeyCode.Q:\n                return 'Q';\n            case EKeyCode.LAlt:\n                return 'L . Alt';\n            case EKeyCode.RAlt:\n                return 'R . Alt';\n            case EKeyCode.M:\n                return 'M';\n            case EKeyCode.Comma:\n                return ',';\n            case EKeyCode.P:\n                return 'P';\n            case EKeyCode.SZ:\n                return 'ß';\n            case EKeyCode.Left:\n                return 'L . Arrow';\n            case EKeyCode.Down:\n                return 'D . Arrow';\n            case EKeyCode.Y:\n                return 'Y';\n            case EKeyCode.X:\n                return 'X';\n            case EMouseClick.Left:\n                return 'L . Mouse';\n            case EMouseClick.Right:\n                return 'R . Mouse';\n            default:\n                return '';\n        }\n    };\n    GameController.prototype.drawScoreboard = function () {\n        var _this = this;\n        this.drawingContext.clearRect(Config.canvasWidth - Config.scoreBoardWith, 0, Config.canvasWidth, Config.canvasHeight);\n        this.drawingContext.beginPath();\n        this.drawingContext.rect(Config.canvasWidth - Config.scoreBoardWith, this.frameLineWidth / 2, Config.scoreBoardWith - (this.frameLineWidth / 2), Config.canvasHeight - (this.frameLineWidth));\n        this.drawingContext.fillStyle = '#3C3C3C';\n        this.drawingContext.fill();\n        this.drawingContext.lineWidth = this.frameLineWidth;\n        this.drawingContext.strokeStyle = '#6E6E6E';\n        this.drawingContext.stroke();\n        this.playerManager.getPlayers().forEach(function (player, index) {\n            if (!player.isActive) {\n                return;\n            }\n            _this.drawingContext.textAlign = 'middle';\n            var fontSize = Config.canvasHeight / (_this.playerManager.getPlayers().length + 2);\n            _this.drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n            _this.drawingContext.fillStyle = player.color;\n            _this.drawingContext.fillText(\"\" + player.score, Config.canvasWidth - (Config.scoreBoardWith / 1.5) - (4 * _this.frameLineWidth), Config.canvasHeight / _this.playerManager.getPlayers().length * (index + 1) - (fontSize / 3));\n        });\n    };\n    GameController.prototype.drawGameFrames = function () {\n        this.drawPlayingFieldFrame();\n        this.drawScoreboard();\n    };\n    GameController.prototype.drawPlayingFieldFrame = function () {\n        this.drawingContext.clearRect(0, 0, Config.canvasWidth - Config.scoreBoardWith, Config.canvasHeight);\n        this.drawingContext.lineWidth = this.frameLineWidth;\n        this.drawingContext.strokeStyle = '#6E6E6E';\n        this.drawingContext.strokeRect(this.frameLineWidth / 2, this.frameLineWidth / 2, Config.canvasWidth - Config.scoreBoardWith - (this.frameLineWidth / 2), Config.canvasHeight - this.frameLineWidth);\n    };\n    GameController.prototype.getMaxScore = function () {\n        return (this.playerManager.getNumberOfActivePlayers() - 1) * 10;\n    };\n    return GameController;\n}());\nexport { GameController };\n","import { Config } from './config';\nimport { getRandomNumber } from './utils';\nimport { EMouseClick } from './keyboard-controls';\nvar PlayerManager = /** @class */ (function () {\n    function PlayerManager() {\n        this.players = new Map();\n    }\n    PlayerManager.prototype.addPlayer = function (player) {\n        if (this.players.has(player.id)) {\n            throw new Error('Player with given Id already existing');\n        }\n        this.players.set(player.id, player);\n        this.bindKeyboardControls(player);\n    };\n    PlayerManager.prototype.removePlayer = function (player) {\n        this.players.delete(player.id);\n        // technically we need to unbind keyboard controls here\n        // method currently unused so ¯\\_(ツ)_/¯\n    };\n    PlayerManager.prototype.initializePlayers = function () {\n        Array.from(this.players.values())\n            .filter(function (player) {\n            return player.isActive;\n        })\n            .forEach(function (player) {\n            player.xPosition = getRandomNumber((Config.canvasWidth - Config.scoreBoardWith) / 5, 4 * (Config.canvasWidth - Config.scoreBoardWith) / 5);\n            player.yPosition = getRandomNumber(Config.canvasHeight / 5, 4 * Config.canvasHeight / 5);\n            player.angle = Math.random() * 360;\n            player.isAlive = true;\n        });\n    };\n    PlayerManager.prototype.bindKeyboardControls = function (player) {\n        // Todo: To beb consistent we should use the EventHandler here...\n        document.addEventListener('keydown', function (event) {\n            event.preventDefault();\n            if (event.keyCode === player.leftControl) {\n                player.isTurningLeft = true;\n            }\n            if (event.keyCode === player.rightControl) {\n                player.isTurningRight = true;\n            }\n        });\n        document.addEventListener('keyup', function (event) {\n            event.preventDefault();\n            if (event.keyCode === player.leftControl) {\n                player.isTurningLeft = false;\n            }\n            if (event.keyCode === player.rightControl) {\n                player.isTurningRight = false;\n            }\n        });\n        document.addEventListener('mousedown', function (event) {\n            event.preventDefault();\n            if (event.button === 0) {\n                if (player.leftControl === EMouseClick.Left) {\n                    player.isTurningLeft = true;\n                }\n                if (player.rightControl === EMouseClick.Left) {\n                    player.isTurningRight = true;\n                }\n            }\n            if (event.button === 2) {\n                if (player.leftControl === EMouseClick.Right) {\n                    player.isTurningLeft = true;\n                }\n                if (player.rightControl === EMouseClick.Right) {\n                    player.isTurningRight = true;\n                }\n            }\n        });\n        document.addEventListener('mouseup', function (event) {\n            event.preventDefault();\n            if (event.button === 0) {\n                if (player.leftControl === EMouseClick.Left) {\n                    player.isTurningLeft = false;\n                }\n                if (player.rightControl === EMouseClick.Left) {\n                    player.isTurningRight = false;\n                }\n            }\n            if (event.button === 2) {\n                if (player.leftControl === EMouseClick.Right) {\n                    player.isTurningLeft = false;\n                }\n                if (player.rightControl === EMouseClick.Right) {\n                    player.isTurningRight = false;\n                }\n            }\n        });\n    };\n    PlayerManager.prototype.getPlayers = function () {\n        return Array.from(this.players.values());\n    };\n    PlayerManager.prototype.getNumberOfActivePlayers = function () {\n        return this.getPlayers().filter(function (player) {\n            return player.isActive;\n        }).length;\n    };\n    PlayerManager.prototype.updateScores = function (ranks) {\n        var _this = this;\n        ranks.forEach(function (player, index) {\n            player.score += _this.getNumberOfActivePlayers() - index - 1;\n        });\n    };\n    PlayerManager.prototype.getHighestScore = function () {\n        var scores = Array.from(this.players.values()).map(function (player) {\n            return player.score;\n        });\n        return Math.max.apply(Math, scores);\n    };\n    PlayerManager.prototype.resetActiveStatus = function () {\n        Array.from(this.players.values()).forEach(function (player) {\n            player.isActive = false;\n        });\n    };\n    PlayerManager.prototype.resetScores = function () {\n        Array.from(this.players.values()).forEach(function (player) {\n            player.score = 0;\n        });\n    };\n    return PlayerManager;\n}());\nexport { PlayerManager };\n","var Player = /** @class */ (function () {\n    function Player(id, name, color, leftControl, rightControl) {\n        this._xPosition = 0;\n        this._yPosition = 0;\n        this._angle = 0;\n        this._isAlive = false;\n        this._score = 0;\n        this._isTurningLeft = false;\n        this._isTurningRight = false;\n        this._isActive = false;\n        this._id = id;\n        this._name = name;\n        this._color = color;\n        this._leftControl = leftControl;\n        this._rightControl = rightControl;\n    }\n    Object.defineProperty(Player.prototype, \"id\", {\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"xPosition\", {\n        get: function () {\n            return this._xPosition;\n        },\n        set: function (value) {\n            this._xPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"yPosition\", {\n        get: function () {\n            return this._yPosition;\n        },\n        set: function (value) {\n            this._yPosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"angle\", {\n        get: function () {\n            return this._angle;\n        },\n        set: function (value) {\n            this._angle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isAlive\", {\n        get: function () {\n            return this._isAlive;\n        },\n        set: function (value) {\n            this._isAlive = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"score\", {\n        get: function () {\n            return this._score;\n        },\n        set: function (value) {\n            this._score = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isTurningLeft\", {\n        get: function () {\n            return this._isTurningLeft;\n        },\n        set: function (value) {\n            this._isTurningLeft = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isTurningRight\", {\n        get: function () {\n            return this._isTurningRight;\n        },\n        set: function (value) {\n            this._isTurningRight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"leftControl\", {\n        get: function () {\n            return this._leftControl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"rightControl\", {\n        get: function () {\n            return this._rightControl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"isActive\", {\n        get: function () {\n            return this._isActive;\n        },\n        set: function (value) {\n            this._isActive = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Player;\n}());\nexport { Player };\n","import { GameController } from './game-controller';\nimport { PlayerManager } from './player-manager';\nimport { Player } from './player';\nimport { EColor } from './color';\nimport { Config } from './config';\nimport { EKeyCode, EMouseClick } from './keyboard-controls';\nimport { EventHandler } from './event-handler';\nwindow.onload = function () {\n    Config.canvasWidth = document.body.clientWidth - 20;\n    Config.canvasHeight = document.body.clientHeight - 50;\n    var canvasId = 'canvas';\n    var canvasElement = document.getElementById(canvasId);\n    if (!canvasElement) {\n        throw new Error('No canvas element found');\n    }\n    canvasElement.width = Config.canvasWidth;\n    canvasElement.height = Config.canvasHeight;\n    var drawingContext;\n    if (canvasElement.getContext) {\n        drawingContext = canvasElement.getContext('2d');\n    }\n    else {\n        throw new Error('No canvas support');\n    }\n    drawIntroText();\n    EventHandler.oneTimeEventListener(document, 'keydown', initGame);\n    function drawIntroText() {\n        var frameLineWidth = 5;\n        drawingContext.lineWidth = frameLineWidth;\n        drawingContext.strokeStyle = '#6E6E6E';\n        drawingContext.strokeRect(frameLineWidth / 2, frameLineWidth / 2, Config.canvasWidth - frameLineWidth, Config.canvasHeight - frameLineWidth);\n        drawingContext.textAlign = 'middle';\n        var fontSize = Config.canvasHeight / 10;\n        drawingContext.font = fontSize + \"px Fredericka the Great, cursive\";\n        drawingContext.fillStyle = '#ffffff';\n        var textString = 'Achtung, die Kurve !';\n        var textWidth = drawingContext.measureText(textString).width;\n        drawingContext.fillText(textString, (Config.canvasWidth / 2) - (textWidth / 2), (Config.canvasHeight / 2) + (fontSize / 2));\n        drawingContext.textAlign = 'middle';\n        drawingContext.font = \"lighter 16px Helvetica, Arial, sans-serif\";\n        drawingContext.fillStyle = '#ffffff';\n        textString = 'Press any key to continue';\n        textWidth = drawingContext.measureText(textString).width;\n        drawingContext.fillText(textString, (Config.canvasWidth / 2) - (textWidth / 2), Config.canvasHeight - 50);\n    }\n    function initGame() {\n        var playerManager = new PlayerManager();\n        var player1 = new Player(1, 'Player 1', EColor.Red, EKeyCode.One, EKeyCode.Q);\n        playerManager.addPlayer(player1);\n        var player2 = new Player(2, 'Player 2', EColor.Yellow, EKeyCode.Y, EKeyCode.X);\n        playerManager.addPlayer(player2);\n        var player3 = new Player(3, 'Player 3', EColor.Orange, EKeyCode.M, EKeyCode.Comma);\n        playerManager.addPlayer(player3);\n        var player4 = new Player(4, 'Player 4', EColor.Green, EKeyCode.Left, EKeyCode.Down);\n        playerManager.addPlayer(player4);\n        var player5 = new Player(5, 'Player 5', EColor.Pink, EKeyCode.P, EKeyCode.SZ);\n        playerManager.addPlayer(player5);\n        var player6 = new Player(6, 'Player 6', EColor.Blue, EMouseClick.Left, EMouseClick.Right);\n        playerManager.addPlayer(player6);\n        var game = new GameController(drawingContext, playerManager);\n    }\n};\n"],"sourceRoot":""}